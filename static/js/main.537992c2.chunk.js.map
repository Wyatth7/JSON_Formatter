{"version":3,"sources":["containers/Input/Input.js","containers/Output/Output.js","components/MoreToolsSection/ToolBox/ToolBox.js","scripts/toJSONFormat/toJSON.js","containers/Converter/Converter.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","inputFieldValue","onChangeHandler","event","setState","target","value","onSendItHandler","e","preventDefault","props","change","error","changeError","onClearHandler","clear","className","id","onSubmit","this","onChange","placeholder","name","onClick","Component","Output","isInput","noText","copyToClipboardHandler","copy","formatted","alert","readOnly","ToolBox","icon","faImages","faMoneyBillWaveAlt","rel","href","size","title","text","comma","openBrackets","closetBrackets","allArr","addTabs","formattedString","prettyPrint","string","split","forEach","el","ifOpenBracket","addMainContent","ifComma","ifClosedBracket","console","log","item","test","toQuery","tab","push","index","indexOf","format","newTabSize","pop","join","newItem","Converter","openNavModal","showVerticalNav","windowOffset","window","scrollY","document","body","setAttribute","closeNavModal","scrollTo","closeNavModalAndScroll","scrollToAboutHandler","scroller","duration","delay","smooth","containerID","offset","scrollToToolsHandler","onInputChangeHandler","input","submitHandler","submited","JSON","parse","err","validateString","finalString","formatString","onChangeErrorStateHandler","responsiveClass","isCleared","prevProps","prevState","displayNavMobile","to","scroll","scrollToTop","faAlignLeft","faBars","btnStyle","marginLeft","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.537992c2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"../../styles/css/styles.css\";\r\n\r\nclass Input extends Component {\r\n  state = {\r\n    inputFieldValue: \"\",\r\n  };\r\n\r\n  // executes when input is changed.\r\n  // sends InputField value to Converter.js.\r\n  onChangeHandler = (event) => {\r\n    this.setState({ inputFieldValue: event.target.value });\r\n    // this.props.change(event.target.value);\r\n  };\r\n\r\n  // excecuted when send it btn is pressed and clears the input field.\r\n  // sets inputFieldValue to an empty string, which updates the inputs value to\r\n  // nothing.\r\n  onSendItHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.change(this.state.inputFieldValue);\r\n    if (this.props.error) {\r\n      this.props.changeError();\r\n    }\r\n  };\r\n\r\n  // executes when clear btn is pressed.\r\n  // updated Converter.js's state as well as calls onClearHander in Converter.js\r\n  onClearHandler = () => {\r\n    this.props.clear();\r\n    // this.props.clear();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Input equalHW padding\" id=\"Input\">\r\n        <form onSubmit={this.onSendItHandler}>\r\n          <p>JSON data</p>\r\n          <textarea\r\n            onChange={this.onChangeHandler}\r\n            placeholder=\"{ }\"\r\n            name=\"jsonDataInput\"\r\n          ></textarea>\r\n          <button onClick={this.onSendItHandler} className=\"btn\">\r\n            Send it\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n\r\n// this goes on send it btn clicked property\r\n// clicked={this.props.submited}\r\n","import React, { Component } from \"react\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport \"../../styles/css/styles.css\";\r\n\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Auxiliary from \"../../hoc/Auxiliary\";\r\n\r\nclass Output extends Component {\r\n  state = {\r\n    clear: this.props.isInput,\r\n    noText: `Your JSON will be here when you send it!`,\r\n    error: \"There was an error within your JSON data.\",\r\n  };\r\n\r\n  // copies text inside of displayPara to the users clipboard.\r\n  // alerts user text has been copied\r\n  copyToClipboardHandler = () => {\r\n    copy(this.props.formatted);\r\n    alert(\"Copied to clipboard\");\r\n  };\r\n\r\n  // Calls the clear method passed via props\r\n  onClearHandler = () => {\r\n    this.props.clear();\r\n  };\r\n\r\n  render() {\r\n    // If there is an error in the user's data, an error message\r\n    // will be displayed. If there is no error, the user's formatted\r\n    // string will be shown.\r\n    // let displayText = null;\r\n    // this.props.error\r\n    //   ? (displayText = this.state.error)\r\n    //   : (displayText = this.props.formatted);\r\n\r\n    return (\r\n      <div className=\"Output padding\">\r\n        <div className=\"OutputTextBox\">\r\n          <p>Formatted data</p>\r\n          <textarea value={this.props.formatted} readOnly></textarea>\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button\r\n            className=\"btn buttons--copy\"\r\n            onClick={this.copyToClipboardHandler}\r\n          >\r\n            Copy\r\n          </button>\r\n          <button className=\"btn buttons--clear\" onClick={this.onClearHandler}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faMoneyBillWaveAlt,\r\n  faImages,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ToolBox = (props) => {\r\n  let icon = null;\r\n  props.icon === \"image\" ? (icon = faImages) : (icon = faMoneyBillWaveAlt);\r\n\r\n  return (\r\n    <a rel=\"noopener noreferrer\" href={props.href} target=\"_blank\">\r\n      <div className=\"ToolBox\">\r\n        <div>\r\n          <FontAwesomeIcon className=\"icon\" icon={icon} size=\"4x\" />\r\n          <h2>{props.title}</h2>\r\n          <p>{props.text}</p>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default ToolBox;\r\n","const comma = [',']; \r\nconst openBrackets = ['[', '{'];\r\nconst closetBrackets = [']', '}'];\r\nconst allArr = [...openBrackets, ...closetBrackets, ...comma];\r\nlet addTabs = [];\r\nlet stringArr = [];\r\nlet formattedString = '';\r\n// tab variable replaces '\\t' in program.\r\n// change was made for visual reasons.\r\nconst spaceTab = ' ';\r\n\r\n// implements prettier to the string passed to it.\r\nconst formatString = string => {\r\n    prettyPrint(string)\r\n    const finalString = formattedString;\r\n    formattedString = '';\r\n    return finalString\r\n}\r\n\r\n// checks if valid javascript object.\r\nconst validateString = string => {\r\n    try {\r\n        JSON.parse(string);\r\n        return true;\r\n    } catch(err) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// returns a formatted string\r\nconst prettyPrint = string => {\r\n    stringArr = string.split('');\r\n\r\n    stringArr.forEach(el => {\r\n        ifOpenBracket(el);\r\n        addMainContent(el);\r\n        ifComma(el);\r\n        ifClosedBracket(el);\r\n    });\r\n\r\n    console.log(formattedString);\r\n}\r\n\r\n// checks for open brackets or curly brace's and formats it as a line break and tabs the next line\r\n// (same general rules for all if functions)\r\nconst ifOpenBracket = item => { \r\n    let isTrue = null;\r\n    if (item === '{' || item === '[') {\r\n        isTrue = true;\r\n        test(openBrackets, item, isTrue);\r\n    }\r\n}\r\n\r\n// checks for comma and formats. \r\nconst ifComma = item => {\r\n    test(comma, item, false);\r\n}\r\n\r\n// checks for closed brackets or curly brace and formats.\r\nconst ifClosedBracket = item => {\r\n    test(closetBrackets, item, false);\r\n}\r\n\r\n// toQuery param is the array to loop through, item param is the what is being searched for\r\n// inside of toQuery.\r\n// tab param is a boolean value. If true, a tab will be inserted after a line break.\r\nconst test = (toQuery, item, tab) => {\r\n    if (tab) {  \r\n\r\n        addTabs.push(spaceTab);\r\n    }\r\n\r\n    const index = toQuery.indexOf(item);\r\n    // to add JSON data section maybe add a check in this if statement \r\n    // that adds everything that is not in one of the 3 arrays being called\r\n    // or blacklist the sent item\r\n    if (index === -1) {\r\n        return null;\r\n    }else {\r\n        let format = '';\r\n\r\n        if (item === '}' || item === ']') {\r\n            const newTabSize = addTabs;\r\n            newTabSize.pop();\r\n            format = `\\n${newTabSize.join('')}${item}`\r\n        }else {\r\n            const newItem = toQuery[index];\r\n            tab ? format = `${newItem}\\n${addTabs.join('')}` : format = `${newItem}\\n${addTabs.join('')}`;\r\n        }\r\n        formattedString += format;\r\n    }\r\n}\r\n\r\nconst addMainContent = item => {\r\n    const index = allArr.indexOf(item);\r\n    if (index === -1) {\r\n        formattedString += `${item}`;\r\n    }\r\n}\r\n\r\nexport { formatString, validateString };","// dummy JSON\r\n// [{\"name\": \"wyatt\",\"name\": \"Andrew\",\"name\": \"dylan\"}]\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Link, Element, animateScroll as scroll, scroller } from \"react-scroll\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAlignLeft, faBars } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Input from \"../Input/Input\";\r\nimport Output from \"../Output/Output\";\r\nimport ToolBox from \"./../../components/MoreToolsSection/ToolBox/ToolBox\";\r\n\r\nimport {\r\n  formatString,\r\n  validateString,\r\n} from \"../../scripts/toJSONFormat/toJSON\";\r\n\r\nclass Converter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showVerticalNav: false,\r\n      responsiveClass: \"responsive\",\r\n      input: \"\",\r\n      formattedString: \"\",\r\n      submited: false,\r\n      isInput: false,\r\n      isCleared: false,\r\n      error: false,\r\n    };\r\n    this.windowOffset = 0;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.input !== this.state.input) {\r\n      if (this.state.input !== \"\") {\r\n        this.submitHandler();\r\n      }\r\n    }\r\n  }\r\n\r\n  // When the modal is opened, set this.windowOffset to current y position, and disable scrolling.\r\n  openNavModal = () => {\r\n    this.setState({ showVerticalNav: true }, () => {\r\n      this.windowOffset = window.scrollY;\r\n      document.body.setAttribute(\r\n        \"style\",\r\n        `position: fixed; top: -${this.windowOffset}px; left: 0; right:0;`\r\n      );\r\n    });\r\n  };\r\n\r\n  // When modal is closed, use this.windowOffset to return the user to their stopped position.\r\n  closeNavModal = () => {\r\n    this.setState({ showVerticalNav: false }, () => {\r\n      document.body.setAttribute(\"style\", \"\");\r\n      window.scrollTo(0, this.windowOffset);\r\n    });\r\n  };\r\n\r\n  // Closes nav modal and scrolls the user to the location of the link they clicked.\r\n  closeNavModalAndScroll = () => {\r\n    this.setState({ showVerticalNav: false }, () => {\r\n      document.body.setAttribute(\"style\", \"\");\r\n    });\r\n  };\r\n\r\n  // Scrolls to about section when modal link is clicked\r\n  scrollToAboutHandler = () => {\r\n    this.closeNavModalAndScroll();\r\n    scroller.scrollTo(\"scrollToAbout\", {\r\n      duration: 1500,\r\n      delay: 0,\r\n      smooth: \"easeInOutQuint\",\r\n      containerID: \"aboutContainer\",\r\n      offset: 0,\r\n    });\r\n  };\r\n\r\n  // Scrolls to More Tools section when modal link is clicked\r\n  scrollToToolsHandler = () => {\r\n    this.closeNavModalAndScroll();\r\n    scroller.scrollTo(\"scrollToTools\", {\r\n      duration: 1500,\r\n      delay: 0,\r\n      smooth: \"eastInOutQuint\",\r\n      containerID: \"toolsContainer\",\r\n      offset: 0,\r\n    });\r\n  };\r\n\r\n  // executes when input value changes\r\n  onInputChangeHandler = (value) => {\r\n    this.setState({ isInput: true, input: value });\r\n  };\r\n\r\n  // executes when the clear btn is pressed.\r\n  // updates state to remove error message from Output.js and changes submit state to false\r\n  onClearHandler = () => {\r\n    this.setState({ formattedString: \"\", input: \"\", isInput: false });\r\n  };\r\n\r\n  // executes when send it btn is clicked.\r\n  // calls validateString function and formatString to check for correct JSON syntax as well\r\n  // as implement prettier.\r\n  submitHandler = () => {\r\n    this.setState({ submited: true });\r\n\r\n    const isValid = validateString(this.state.input);\r\n    if (isValid === false) {\r\n      this.setState({\r\n        error: true,\r\n        formattedString: \"There was an error in your JSON Data\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const format = formatString(this.state.input);\r\n    this.setState({ formattedString: format });\r\n  };\r\n\r\n  onChangeErrorStateHandler = (string) => {\r\n    // const validate = validateString(string);\r\n\r\n    this.setState({ error: false });\r\n  };\r\n\r\n  render() {\r\n    let responsiveClass = null;\r\n    this.state.showVerticalNav\r\n      ? (responsiveClass = this.state.responsiveClass)\r\n      : (responsiveClass = null);\r\n\r\n    let displayNavMobile = null;\r\n    this.state.showVerticalNav\r\n      ? (displayNavMobile = (\r\n          <div className=\"mobile-nav\">\r\n            <Link\r\n              onClick={this.scrollToAboutHandler}\r\n              className={`links--about ${responsiveClass}`}\r\n              to=\"scrollToAbout\"\r\n            >\r\n              About\r\n            </Link>\r\n            <Link\r\n              onClick={this.scrollToAboutHandler}\r\n              className={`links--tools ${responsiveClass}`}\r\n              to=\"moreTools\"\r\n            >\r\n              More Tools\r\n            </Link>\r\n            <button onClick={this.closeNavModal} className=\"links--close\">\r\n              Close\r\n            </button>\r\n          </div>\r\n        ))\r\n      : (displayNavMobile = null);\r\n\r\n    return (\r\n      <div id=\"converterID\" className=\"Converter\">\r\n        <div className=\"Nav padding\">\r\n          <div\r\n            className=\"Nav--logo\"\r\n            onClick={() => {\r\n              scroll.scrollToTop();\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faAlignLeft} size=\"3x\" />\r\n            <h1>JSON Formatter</h1>\r\n          </div>\r\n          <div className=\"Nav--links\">\r\n            <Link\r\n              className={`links--about`}\r\n              onClick={this.scrollToAboutHandler}\r\n              to=\"about\"\r\n            >\r\n              About\r\n            </Link>\r\n            <Link\r\n              className={`links--tools`}\r\n              onClick={this.scrollToToolsHandler}\r\n              to=\"moreTools\"\r\n            >\r\n              More Tools\r\n            </Link>\r\n            <div onClick={this.openNavModal} className=\"links--burger\">\r\n              <FontAwesomeIcon icon={faBars} size=\"3x\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {displayNavMobile}\r\n        <div className=\"Converter--content\" id=\"mainContent\">\r\n          <Input\r\n            btnStyle={{ marginLeft: \"1rem\" }}\r\n            // newValue={this.state.input}\r\n            submited={this.submitHandler}\r\n            change={this.onInputChangeHandler}\r\n            clear={this.onClearHandler}\r\n            error={this.state.error}\r\n            changeError={this.onChangeErrorStateHandler}\r\n          />\r\n          {this.state.formattedString === \"\" ? null : (\r\n            <Output\r\n              clear={this.onClearHandler}\r\n              error={this.state.error}\r\n              isInput={this.state.isInput}\r\n              formatted={this.state.formattedString}\r\n            />\r\n          )}\r\n          <Element id=\"aboutContainer\" name=\"scrollToAbout\">\r\n            <div className=\"padding\">\r\n              <div className=\"about-section\" id=\"about\">\r\n                <h1>About</h1>\r\n                <div className=\"line-break\"></div>\r\n                <p>\r\n                  JSON Validator and Formatter was created to ease the process\r\n                  of formatting long, time-wasting strings of JSON data.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </Element>\r\n          <Element id=\"toolsContainer\" name=\"scrollToTools\">\r\n            <div className=\"tools-section padding\" id=\"moreTools\">\r\n              <div className=\"padding\">\r\n                <h1>More Tools</h1>\r\n                <div className=\"line-break\"></div>\r\n                <h3>Was your problem solved?</h3>\r\n                <p>\r\n                  If you answered yes, check out our other time saving, problem\r\n                  solving tools.\r\n                </p>\r\n              </div>\r\n              <div className=\"tool-links\">\r\n                <div>\r\n                  <ToolBox\r\n                    href=\"https://curringo.herokuapp.com/\"\r\n                    icon=\"money\"\r\n                    title=\"Curringo\"\r\n                    text=\"Convert over 30 global currencies.\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <ToolBox\r\n                    href=\"https://filestop.herokuapp.com/\"\r\n                    icon=\"image\"\r\n                    title=\"File Stop\"\r\n                    text=\"Upload, edit, and download your favorite pictures.\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Element>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n","import React from \"react\";\r\nimport \"./styles/css/styles.css\";\r\n\r\nimport Converter from \"./containers/Converter/Converter\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Converter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}