{"version":3,"sources":["components/UI/InputField/InputField.js","components/UI/Button/Button.js","containers/Input/Input.js","hoc/Auxiliary.js","containers/Output/Output.js","scripts/toJSONFormat/toJSON.js","containers/Converter/Converter.js","App.js","serviceWorker.js","index.js"],"names":["InputField","props","className","value","onChange","changed","placeholder","Button","style","addedStyle","disabled","disabledButton","type","onClick","clicked","children","Input","state","inputFieldValue","onChangeHandler","event","setState","target","onSendItHandler","change","error","changeError","onClearHandler","clear","this","btnStyle","Component","Auxiliary","Output","isInput","noText","couldNotParse","copyToClipboardHandler","copy","formatted","alert","displayPara","margin","width","displayCopyBtn","comma","openBrackets","closetBrackets","allArr","addTabs","formattedString","formatString","string","prettyPrint","finalString","validateString","JSON","parse","err","split","forEach","el","ifOpenBracket","addMainContent","ifComma","ifClosedBracket","console","log","item","test","toQuery","tab","push","index","indexOf","format","newTabSize","pop","join","newItem","Converter","input","submited","isCleared","onInputChangeHandler","submitHandler","onChangeErrorStateHandler","prevProps","prevState","marginLeft","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fd8032a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../../styles/css/styles.css';\r\n\r\nconst InputField = (props) => {\r\n    return (\r\n        <input className=\"InputField\" value={props.value} onChange={props.changed} placeholder=\"Enter JSON string\" />\r\n    );\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\nimport '../../../styles/css/styles.css';\r\n\r\nconst Button = (props) => (\r\n    <button \r\n        style={props.addedStyle}\r\n        disabled={props.disabledButton ? props.disabledButton : false} \r\n        type={props.type} className=\"Button\" \r\n        onClick={props.clicked}>{props.children}</button>\r\n);\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\n\r\nimport '../../styles/css/styles.css';\r\n\r\nimport InputField from '../../components/UI/InputField/InputField';\r\nimport Button from '../../components/UI/Button/Button';\r\n\r\nclass Input extends Component {\r\n    state = {\r\n        inputFieldValue: '',\r\n    }\r\n\r\n    // executes when input is changed.\r\n    // sends InputField value to Converter.js.\r\n    onChangeHandler = event => {\r\n        this.setState({inputFieldValue: event.target.value});\r\n        // this.props.change(event.target.value);\r\n    }\r\n\r\n    // excecuted when send it btn is pressed and clears the input field.\r\n    // sets inputFieldValue to an empty string which updates the inputs value to\r\n    // nothing.\r\n    onSendItHandler = () => {\r\n        this.props.change(this.state.inputFieldValue);\r\n        this.setState({inputFieldValue: ''});\r\n        if (this.props.error) {\r\n            this.props.changeError();\r\n        }\r\n    }\r\n\r\n    // executes when clear btn is pressed.\r\n    // updated Converter.js's state as well as calls onClearHander in Converter.js \r\n    onClearHandler = () => {\r\n        this.props.clear();\r\n        // this.props.clear();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"InputWrapper\">\r\n                <div className=\"Input\">\r\n                    <h1>Enter a JSON string below</h1>\r\n                    <div className=\"Form\">\r\n                        <InputField value={this.state.inputFieldValue} changed={this.onChangeHandler}/>\r\n                        <div>\r\n                            <Button addedStyle={this.props.btnStyle} clicked={this.onSendItHandler}>Send it</Button>\r\n                            {/* <Button addedStyle={btnStyle} clicked={this.onClearHandler}>Clear</Button>  */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;\r\n\r\n// this goes on send it btn clicked property\r\n// clicked={this.props.submited}","const Auxiliary = (props) => (props.children);\r\n\r\nexport default Auxiliary;","import React, { Component } from \"react\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport \"../../styles/css/styles.css\";\r\n\r\n\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Auxiliary from '../../hoc/Auxiliary';\r\n\r\nclass Output extends Component {\r\n  state = {\r\n    clear: this.props.isInput,\r\n    noText: `Your JSON will be here when you send it!`,\r\n    couldNotParse: 'There was something wrong with your input.\\n Please try again. :('\r\n  };\r\n\r\n  // copies text inside of displayPara to the users clipboard.\r\n  // alerts user text has been copied \r\n  copyToClipboardHandler = () => {\r\n    copy(this.props.formatted);\r\n    alert(\"Copied to clipboard\");\r\n  };\r\n\r\n\r\n\r\n  onClearHandler = () => {\r\n    this.props.clear();\r\n    // this.props.clear();\r\n  }\r\n\r\n  render() {\r\n\r\n    let displayPara;\r\n\r\n    if (this.props.isInput) {\r\n      displayPara = <pre className=\"formatted\">{this.props.formatted}</pre>\r\n    } else if (!this.props.isInput) {\r\n      displayPara = <p className=\"unFormatted\">{this.state.noText}</p>\r\n    }\r\n\r\n    // let displayPara =\r\n    //   this.props.input !== \"\" ? (\r\n    //     <pre className=\"formatted\">{this.props.formatted}</pre>\r\n    //   ) : (\r\n    //     <p className=\"unFormatted\">{this.state.unFormatted}</p>\r\n    //   );\r\n\r\n    const btnStyle = {margin: ' 1rem auto 0 auto', width: '25%'};\r\n\r\n    let displayCopyBtn =\r\n      this.props.formatted !== '' ? (\r\n        <Auxiliary>\r\n          <Button\r\n          addedStyle={btnStyle}\r\n          disabledButton={this.props.error}\r\n          clicked={this.copyToClipboardHandler}\r\n        >\r\n          Copy JSON\r\n          </Button>\r\n          <Button addedStyle={btnStyle} clicked={this.onClearHandler}>Clear</Button> \r\n        </Auxiliary>\r\n        \r\n      ) : null;\r\n\r\n    return (\r\n      <div className=\"Output\">\r\n        <div className=\"OutputTextBox\">\r\n            {this.props.error \r\n            ? (\r\n                // <Auxiliary>\r\n                    <p className=\"unFormatted\">{this.state.couldNotParse}</p>\r\n                // </Auxiliary>\r\n                ) : displayPara }\r\n\r\n        </div>\r\n        {displayCopyBtn}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;","const comma = [',']; \r\nconst openBrackets = ['[', '{'];\r\nconst closetBrackets = [']', '}'];\r\nconst allArr = [...openBrackets, ...closetBrackets, ...comma];\r\nlet addTabs = [];\r\nlet stringArr = [];\r\nlet formattedString = '';\r\n// tab variable replaces '\\t' in program.\r\n// change was made for visual reasons.\r\nconst spaceTab = ' ';\r\n\r\n// implements prettier to the string passed to it.\r\nconst formatString = string => {\r\n    prettyPrint(string)\r\n    const finalString = formattedString;\r\n    formattedString = '';\r\n    return finalString\r\n}\r\n\r\n// checks if valid javascript object.\r\nconst validateString = string => {\r\n    try {\r\n        JSON.parse(string);\r\n        return true;\r\n    } catch(err) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// returns a formatted string\r\nconst prettyPrint = string => {\r\n    stringArr = string.split('');\r\n\r\n    stringArr.forEach(el => {\r\n        ifOpenBracket(el);\r\n        addMainContent(el);\r\n        ifComma(el);\r\n        ifClosedBracket(el);\r\n    });\r\n\r\n    console.log(formattedString);\r\n}\r\n\r\n// checks for open brackets or curly brace's and formats it as a line break and tabs the next line\r\n// (same general rules for all if functions)\r\nconst ifOpenBracket = item => { \r\n    let isTrue = null;\r\n    if (item === '{' || item === '[') {\r\n        isTrue = true;\r\n        test(openBrackets, item, isTrue);\r\n    }\r\n}\r\n\r\n// checks for comma and formats. \r\nconst ifComma = item => {\r\n    test(comma, item, false);\r\n}\r\n\r\n// checks for closed brackets or curly brace and formats.\r\nconst ifClosedBracket = item => {\r\n    test(closetBrackets, item, false);\r\n}\r\n\r\n// toQuery param is the array to loop through, item param is the what is being searched for\r\n// inside of toQuery.\r\n// tab param is a boolean value. If true, a tab will be inserted after a line break.\r\nconst test = (toQuery, item, tab) => {\r\n    if (tab) {  \r\n\r\n        addTabs.push(spaceTab);\r\n    }\r\n\r\n    const index = toQuery.indexOf(item);\r\n    // to add JSON data section maybe add a check in this if statement \r\n    // that adds everything that is not in one of the 3 arrays being called\r\n    // or blacklist the sent item\r\n    if (index === -1) {\r\n        return null;\r\n    }else {\r\n        let format = '';\r\n\r\n        if (item === '}' || item === ']') {\r\n            const newTabSize = addTabs;\r\n            newTabSize.pop();\r\n            format = `\\n${newTabSize.join('')}${item}`\r\n        }else {\r\n            const newItem = toQuery[index];\r\n            tab ? format = `${newItem}\\n${addTabs.join('')}` : format = `${newItem}\\n${addTabs.join('')}`;\r\n        }\r\n        formattedString += format;\r\n    }\r\n}\r\n\r\nconst addMainContent = item => {\r\n    const index = allArr.indexOf(item);\r\n    if (index === -1) {\r\n        formattedString += `${item}`;\r\n    }\r\n}\r\n\r\nexport { formatString, validateString };","// dummy JSON\r\n// [{\"name\": \"wyatt\",\"name\": \"Andrew\",\"name\": \"dylan\"}]\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport '../../styles/css/styles.css';\r\n\r\nimport Input from \"../Input/Input\";\r\nimport Output from \"../Output/Output\";\r\nimport { formatString, validateString } from '../../scripts/toJSONFormat/toJSON';\r\n\r\n\r\nclass Converter extends Component {\r\n  state = {\r\n    input: \"\",\r\n    formattedString: \"\",\r\n    submited: false,\r\n    isInput: false,\r\n    isCleared: false,\r\n    error: false,\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.input !== this.state.input) {\r\n      if (this.state.input !== '') {\r\n        this.submitHandler();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // executes when input value changes\r\n  onInputChangeHandler = (value) => {\r\n    console.log(value);\r\n    this.setState({isInput: true, input: value})\r\n  };\r\n\r\n  // executes when the clear btn is pressed.\r\n  // updates state to remove error message from Output.js and changes submit state to false\r\n  onClearHandler = () => {\r\n    this.setState({ formattedString: '', input: '', isInput: false })\r\n  }\r\n\r\n  // executes when send it btn is clicked.\r\n  // calls validateString function and formatString to check for correct JSON syntax as well\r\n  // as implement prettier.\r\n  submitHandler = () => {\r\n    this.setState({submited: true});\r\n\r\n    const isValid = validateString(this.state.input);\r\n    if (isValid === false) {\r\n        this.setState({error: true})\r\n        return;\r\n    }\r\n\r\n    const format = formatString(this.state.input);\r\n    this.setState({ formattedString: format })\r\n  }\r\n\r\n  onChangeErrorStateHandler = string => {\r\n    // const validate = validateString(string);\r\n\r\n\r\n    this.setState({error: false});\r\n  }\r\n\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   if (this.state.input === nextState.input) {\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Converter\">\r\n        <Input \r\n          btnStyle={{marginLeft: '1rem'}}\r\n          // newValue={this.state.input} \r\n          submited={this.submitHandler} \r\n          change={this.onInputChangeHandler} \r\n          clear={this.onClearHandler} \r\n          error={this.state.error}\r\n          changeError={this.onChangeErrorStateHandler}\r\n          />\r\n        <Output \r\n          clear={this.onClearHandler}\r\n          error={this.state.error} \r\n          isInput={this.state.isInput}\r\n          formatted={this.state.formattedString} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport './styles/css/styles.css';\r\n\r\nimport Converter from './containers/Converter/Converter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Converter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}